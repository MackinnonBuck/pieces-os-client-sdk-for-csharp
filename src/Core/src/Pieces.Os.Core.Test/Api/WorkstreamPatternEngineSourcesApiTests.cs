/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Pieces.Os.Core.Client;
using Pieces.Os.Core.Api;
// uncomment below to import models
//using Pieces.Os.Core.SdkModel;

namespace Pieces.Os.Core.Test.Api
{
    /// <summary>
    ///  Class for testing WorkstreamPatternEngineSourcesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WorkstreamPatternEngineSourcesApiTests : IDisposable
    {
        private WorkstreamPatternEngineSourcesApi instance;

        public WorkstreamPatternEngineSourcesApiTests()
        {
            instance = new WorkstreamPatternEngineSourcesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WorkstreamPatternEngineSourcesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' WorkstreamPatternEngineSourcesApi
            //Assert.IsType<WorkstreamPatternEngineSourcesApi>(instance);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineSearchSources
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineSearchSourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? transferables = null;
            //SearchInput searchInput = null;
            //var response = instance.WorkstreamPatternEngineSearchSources(transferables, searchInput);
            //Assert.IsType<SearchedIdentifiedWorkstreamPatternEngineSources>(response);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineSourcesCreateNewSource
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineSourcesCreateNewSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? transferables = null;
            //SeededWorkstreamPatternEngineSource seededWorkstreamPatternEngineSource = null;
            //var response = instance.WorkstreamPatternEngineSourcesCreateNewSource(transferables, seededWorkstreamPatternEngineSource);
            //Assert.IsType<IdentifiedWorkstreamPatternEngineSource>(response);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineSourcesDeleteSpecificSource
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineSourcesDeleteSpecificSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //instance.WorkstreamPatternEngineSourcesDeleteSpecificSource(source);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineSourcesSnapshot
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineSourcesSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? transferables = null;
            //var response = instance.WorkstreamPatternEngineSourcesSnapshot(transferables);
            //Assert.IsType<IdentifiedWorkstreamPatternEngineSources>(response);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineSourcesStreamIdentifiers
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineSourcesStreamIdentifiersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.WorkstreamPatternEngineSourcesStreamIdentifiers();
            //Assert.IsType<StreamedIdentifiers>(response);
        }
    }
}
