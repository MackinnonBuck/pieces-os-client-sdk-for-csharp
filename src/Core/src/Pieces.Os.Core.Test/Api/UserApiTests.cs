/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Pieces.Os.Core.Client;
using Pieces.Os.Core.Api;
// uncomment below to import models
//using Pieces.Os.Core.SdkModel;

namespace Pieces.Os.Core.Test.Api
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserApiTests : IDisposable
    {
        private UserApi instance;

        public UserApiTests()
        {
            instance = new UserApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UserApi
            //Assert.IsType<UserApi>(instance);
        }

        /// <summary>
        /// Test ClearUser
        /// </summary>
        [Fact]
        public void ClearUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ClearUser();
        }

        /// <summary>
        /// Test RefreshUser
        /// </summary>
        [Fact]
        public void RefreshUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RefreshUser();
            //Assert.IsType<UserProfile>(response);
        }

        /// <summary>
        /// Test SelectUser
        /// </summary>
        [Fact]
        public void SelectUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Auth0User auth0User = null;
            //var response = instance.SelectUser(auth0User);
            //Assert.IsType<UserProfile>(response);
        }

        /// <summary>
        /// Test StreamUser
        /// </summary>
        [Fact]
        public void StreamUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.StreamUser();
            //Assert.IsType<UserProfile>(response);
        }

        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Fact]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserProfile userProfile = null;
            //var response = instance.UpdateUser(userProfile);
            //Assert.IsType<UserProfile>(response);
        }

        /// <summary>
        /// Test UserBetaStatus
        /// </summary>
        [Fact]
        public void UserBetaStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserBetaStatus userBetaStatus = null;
            //var response = instance.UserBetaStatus(userBetaStatus);
            //Assert.IsType<UserBetaStatus>(response);
        }

        /// <summary>
        /// Test UserProviders
        /// </summary>
        [Fact]
        public void UserProvidersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UserProviders();
            //Assert.IsType<ReturnedUserProfile>(response);
        }

        /// <summary>
        /// Test UserSnapshot
        /// </summary>
        [Fact]
        public void UserSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UserSnapshot();
            //Assert.IsType<ReturnedUserProfile>(response);
        }

        /// <summary>
        /// Test UserUpdateVanity
        /// </summary>
        [Fact]
        public void UserUpdateVanityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserProfile userProfile = null;
            //var response = instance.UserUpdateVanity(userProfile);
            //Assert.IsType<UserProfile>(response);
        }
    }
}
