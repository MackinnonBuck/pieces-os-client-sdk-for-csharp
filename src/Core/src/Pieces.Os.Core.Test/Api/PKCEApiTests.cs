/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Pieces.Os.Core.Client;
using Pieces.Os.Core.Api;
// uncomment below to import models
//using Pieces.Os.Core.SdkModel;

namespace Pieces.Os.Core.Test.Api
{
    /// <summary>
    ///  Class for testing PKCEApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PKCEApiTests : IDisposable
    {
        private PKCEApi instance;

        public PKCEApiTests()
        {
            instance = new PKCEApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PKCEApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PKCEApi
            //Assert.IsType<PKCEApi>(instance);
        }

        /// <summary>
        /// Test ClearPKCE
        /// </summary>
        [Fact]
        public void ClearPKCETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ClearPKCE();
        }

        /// <summary>
        /// Test GenerateCode
        /// </summary>
        [Fact]
        public void GenerateCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SeededPKCE seededPKCE = null;
            //var response = instance.GenerateCode(seededPKCE);
            //Assert.IsType<PKCE>(response);
        }

        /// <summary>
        /// Test GenerateToken
        /// </summary>
        [Fact]
        public void GenerateTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TokenizedPKCE tokenizedPKCE = null;
            //var response = instance.GenerateToken(tokenizedPKCE);
            //Assert.IsType<PKCE>(response);
        }

        /// <summary>
        /// Test GetChallenge
        /// </summary>
        [Fact]
        public void GetChallengeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetChallenge();
            //Assert.IsType<PKCE>(response);
        }

        /// <summary>
        /// Test RespondWithCode
        /// </summary>
        [Fact]
        public void RespondWithCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //string state = null;
            //EmbeddedModelSchema schema = null;
            //var response = instance.RespondWithCode(code, state, schema);
            //Assert.IsType<PKCE>(response);
        }
    }
}
