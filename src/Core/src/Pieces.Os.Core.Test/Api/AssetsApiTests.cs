/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Pieces.Os.Core.Client;
using Pieces.Os.Core.Api;
// uncomment below to import models
//using Pieces.Os.Core.SdkModel;

namespace Pieces.Os.Core.Test.Api
{
    /// <summary>
    ///  Class for testing AssetsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AssetsApiTests : IDisposable
    {
        private AssetsApi instance;

        public AssetsApiTests()
        {
            instance = new AssetsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AssetsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AssetsApi
            //Assert.IsType<AssetsApi>(instance);
        }

        /// <summary>
        /// Test AssetsCreateNewAsset
        /// </summary>
        [Fact]
        public void AssetsCreateNewAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? transferables = null;
            //Seed seed = null;
            //var response = instance.AssetsCreateNewAsset(transferables, seed);
            //Assert.IsType<Asset>(response);
        }

        /// <summary>
        /// Test AssetsDeleteAsset
        /// </summary>
        [Fact]
        public void AssetsDeleteAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //var response = instance.AssetsDeleteAsset(asset);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test AssetsDraft
        /// </summary>
        [Fact]
        public void AssetsDraftTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? transferables = null;
            //Seed seed = null;
            //var response = instance.AssetsDraft(transferables, seed);
            //Assert.IsType<Seed>(response);
        }

        /// <summary>
        /// Test AssetsGetRecommendedAssets
        /// </summary>
        [Fact]
        public void AssetsGetRecommendedAssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SeededAssetsRecommendation seededAssetsRecommendation = null;
            //var response = instance.AssetsGetRecommendedAssets(seededAssetsRecommendation);
            //Assert.IsType<Assets>(response);
        }

        /// <summary>
        /// Test AssetsGetRelatedAssets
        /// </summary>
        [Fact]
        public void AssetsGetRelatedAssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Assets assets = null;
            //var response = instance.AssetsGetRelatedAssets(assets);
            //Assert.IsType<Assets>(response);
        }

        /// <summary>
        /// Test AssetsIdentifiersSnapshot
        /// </summary>
        [Fact]
        public void AssetsIdentifiersSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? pseudo = null;
            //var response = instance.AssetsIdentifiersSnapshot(pseudo);
            //Assert.IsType<FlattenedAssets>(response);
        }

        /// <summary>
        /// Test AssetsPseudoSnapshot
        /// </summary>
        [Fact]
        public void AssetsPseudoSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AssetsPseudoSnapshot();
            //Assert.IsType<PseudoAssets>(response);
        }

        /// <summary>
        /// Test AssetsSearchWithFilters
        /// </summary>
        [Fact]
        public void AssetsSearchWithFiltersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? transferables = null;
            //bool? pseudo = null;
            //AssetsSearchWithFiltersInput assetsSearchWithFiltersInput = null;
            //var response = instance.AssetsSearchWithFilters(transferables, pseudo, assetsSearchWithFiltersInput);
            //Assert.IsType<AssetsSearchWithFiltersOutput>(response);
        }

        /// <summary>
        /// Test AssetsSnapshot
        /// </summary>
        [Fact]
        public void AssetsSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? transferables = null;
            //bool? suggested = null;
            //bool? pseudo = null;
            //var response = instance.AssetsSnapshot(transferables, suggested, pseudo);
            //Assert.IsType<Assets>(response);
        }

        /// <summary>
        /// Test AssetsSpecificAssetFormatsSnapshot
        /// </summary>
        [Fact]
        public void AssetsSpecificAssetFormatsSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //bool? transferables = null;
            //var response = instance.AssetsSpecificAssetFormatsSnapshot(asset, transferables);
            //Assert.IsType<Formats>(response);
        }

        /// <summary>
        /// Test AssetsSpecificAssetSnapshot
        /// </summary>
        [Fact]
        public void AssetsSpecificAssetSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //bool? transferables = null;
            //var response = instance.AssetsSpecificAssetSnapshot(asset, transferables);
            //Assert.IsType<Asset>(response);
        }

        /// <summary>
        /// Test AssetsStreamIdentifiers
        /// </summary>
        [Fact]
        public void AssetsStreamIdentifiersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AssetsStreamIdentifiers();
            //Assert.IsType<StreamedIdentifiers>(response);
        }

        /// <summary>
        /// Test GetAssetsStreamTransferables
        /// </summary>
        [Fact]
        public void GetAssetsStreamTransferablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAssetsStreamTransferables();
            //Assert.IsType<Assets>(response);
        }

        /// <summary>
        /// Test SearchAssets
        /// </summary>
        [Fact]
        public void SearchAssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //bool? transferables = null;
            //string searchableTags = null;
            //bool? pseudo = null;
            //var response = instance.SearchAssets(query, transferables, searchableTags, pseudo);
            //Assert.IsType<SearchedAssets>(response);
        }

        /// <summary>
        /// Test StreamAssets
        /// </summary>
        [Fact]
        public void StreamAssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.StreamAssets();
            //Assert.IsType<Assets>(response);
        }
    }
}
