/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Pieces.Os.Core.Client;
using Pieces.Os.Core.Api;
// uncomment below to import models
//using Pieces.Os.Core.SdkModel;

namespace Pieces.Os.Core.Test.Api
{
    /// <summary>
    ///  Class for testing ConversationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ConversationApiTests : IDisposable
    {
        private ConversationApi instance;

        public ConversationApiTests()
        {
            instance = new ConversationApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ConversationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ConversationApi
            //Assert.IsType<ConversationApi>(instance);
        }

        /// <summary>
        /// Test ConversationAssociateAnchor
        /// </summary>
        [Fact]
        public void ConversationAssociateAnchorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //string anchor = null;
            //instance.ConversationAssociateAnchor(conversation, anchor);
        }

        /// <summary>
        /// Test ConversationAssociateAsset
        /// </summary>
        [Fact]
        public void ConversationAssociateAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //Guid asset = null;
            //instance.ConversationAssociateAsset(conversation, asset);
        }

        /// <summary>
        /// Test ConversationAssociateGroundingTemporalRangeWorkstream
        /// </summary>
        [Fact]
        public void ConversationAssociateGroundingTemporalRangeWorkstreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //string range = null;
            //instance.ConversationAssociateGroundingTemporalRangeWorkstream(conversation, range);
        }

        /// <summary>
        /// Test ConversationAssociateWebsite
        /// </summary>
        [Fact]
        public void ConversationAssociateWebsiteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //string website = null;
            //instance.ConversationAssociateWebsite(conversation, website);
        }

        /// <summary>
        /// Test ConversationAssociateWorkstreamSummary
        /// </summary>
        [Fact]
        public void ConversationAssociateWorkstreamSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //string workstreamSummary = null;
            //instance.ConversationAssociateWorkstreamSummary(conversation, workstreamSummary);
        }

        /// <summary>
        /// Test ConversationDisassociateAnchor
        /// </summary>
        [Fact]
        public void ConversationDisassociateAnchorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //string anchor = null;
            //instance.ConversationDisassociateAnchor(conversation, anchor);
        }

        /// <summary>
        /// Test ConversationDisassociateAsset
        /// </summary>
        [Fact]
        public void ConversationDisassociateAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //Guid asset = null;
            //instance.ConversationDisassociateAsset(conversation, asset);
        }

        /// <summary>
        /// Test ConversationDisassociateGroundingTemporalRangeWorkstream
        /// </summary>
        [Fact]
        public void ConversationDisassociateGroundingTemporalRangeWorkstreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //string range = null;
            //instance.ConversationDisassociateGroundingTemporalRangeWorkstream(conversation, range);
        }

        /// <summary>
        /// Test ConversationDisassociateWebsite
        /// </summary>
        [Fact]
        public void ConversationDisassociateWebsiteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //string website = null;
            //instance.ConversationDisassociateWebsite(conversation, website);
        }

        /// <summary>
        /// Test ConversationDisassociateWorkstreamSummary
        /// </summary>
        [Fact]
        public void ConversationDisassociateWorkstreamSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //string workstreamSummary = null;
            //instance.ConversationDisassociateWorkstreamSummary(conversation, workstreamSummary);
        }

        /// <summary>
        /// Test ConversationGetSpecificConversation
        /// </summary>
        [Fact]
        public void ConversationGetSpecificConversationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //bool? transferables = null;
            //var response = instance.ConversationGetSpecificConversation(conversation, transferables);
            //Assert.IsType<Conversation>(response);
        }

        /// <summary>
        /// Test ConversationGroundingMessagesAssociateMessage
        /// </summary>
        [Fact]
        public void ConversationGroundingMessagesAssociateMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //string message = null;
            //instance.ConversationGroundingMessagesAssociateMessage(conversation, message);
        }

        /// <summary>
        /// Test ConversationGroundingMessagesDisassociateMessage
        /// </summary>
        [Fact]
        public void ConversationGroundingMessagesDisassociateMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //string message = null;
            //instance.ConversationGroundingMessagesDisassociateMessage(conversation, message);
        }

        /// <summary>
        /// Test ConversationScoresIncrement
        /// </summary>
        [Fact]
        public void ConversationScoresIncrementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //SeededScoreIncrement seededScoreIncrement = null;
            //instance.ConversationScoresIncrement(conversation, seededScoreIncrement);
        }

        /// <summary>
        /// Test ConversationSpecificConversationMessages
        /// </summary>
        [Fact]
        public void ConversationSpecificConversationMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //bool? transferables = null;
            //var response = instance.ConversationSpecificConversationMessages(conversation, transferables);
            //Assert.IsType<ConversationMessages>(response);
        }

        /// <summary>
        /// Test ConversationSpecificConversationRename
        /// </summary>
        [Fact]
        public void ConversationSpecificConversationRenameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //bool? transferables = null;
            //var response = instance.ConversationSpecificConversationRename(conversation, transferables);
            //Assert.IsType<Conversation>(response);
        }

        /// <summary>
        /// Test ConversationSummarize
        /// </summary>
        [Fact]
        public void ConversationSummarizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //ConversationSummarizeInput conversationSummarizeInput = null;
            //var response = instance.ConversationSummarize(conversation, conversationSummarizeInput);
            //Assert.IsType<ConversationSummarizeOutput>(response);
        }

        /// <summary>
        /// Test ConversationUpdate
        /// </summary>
        [Fact]
        public void ConversationUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? transferables = null;
            //Conversation conversation = null;
            //var response = instance.ConversationUpdate(transferables, conversation);
            //Assert.IsType<Conversation>(response);
        }

        /// <summary>
        /// Test SearchConversationSpecificMessages
        /// </summary>
        [Fact]
        public void SearchConversationSpecificMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conversation = null;
            //bool? transferables = null;
            //SearchInput searchInput = null;
            //var response = instance.SearchConversationSpecificMessages(conversation, transferables, searchInput);
            //Assert.IsType<SearchedConversationMessages>(response);
        }
    }
}
