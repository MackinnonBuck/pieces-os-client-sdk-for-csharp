/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Pieces.Os.Core.Client;
using Pieces.Os.Core.Api;
// uncomment below to import models
//using Pieces.Os.Core.SdkModel;

namespace Pieces.Os.Core.Test.Api
{
    /// <summary>
    ///  Class for testing FormatApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FormatApiTests : IDisposable
    {
        private FormatApi instance;

        public FormatApiTests()
        {
            instance = new FormatApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of FormatApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' FormatApi
            //Assert.IsType<FormatApi>(instance);
        }

        /// <summary>
        /// Test FormatAnalysis
        /// </summary>
        [Fact]
        public void FormatAnalysisTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid format = null;
            //var response = instance.FormatAnalysis(format);
            //Assert.IsType<Analysis>(response);
        }

        /// <summary>
        /// Test FormatReclassify
        /// </summary>
        [Fact]
        public void FormatReclassifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? transferable = null;
            //FormatReclassification formatReclassification = null;
            //var response = instance.FormatReclassify(transferable, formatReclassification);
            //Assert.IsType<Format>(response);
        }

        /// <summary>
        /// Test FormatSnapshot
        /// </summary>
        [Fact]
        public void FormatSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid format = null;
            //bool? transferable = null;
            //var response = instance.FormatSnapshot(format, transferable);
            //Assert.IsType<Format>(response);
        }

        /// <summary>
        /// Test FormatUpdateValue
        /// </summary>
        [Fact]
        public void FormatUpdateValueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? transferable = null;
            //Format format = null;
            //var response = instance.FormatUpdateValue(transferable, format);
            //Assert.IsType<Format>(response);
        }

        /// <summary>
        /// Test FormatUsageEvent
        /// </summary>
        [Fact]
        public void FormatUsageEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SeededTrackedFormatEvent seededTrackedFormatEvent = null;
            //var response = instance.FormatUsageEvent(seededTrackedFormatEvent);
            //Assert.IsType<TrackedFormatEvent>(response);
        }
    }
}
