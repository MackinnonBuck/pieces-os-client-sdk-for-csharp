/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Pieces.Os.Core.Client;
using Pieces.Os.Core.Api;
// uncomment below to import models
//using Pieces.Os.Core.SdkModel;

namespace Pieces.Os.Core.Test.Api
{
    /// <summary>
    ///  Class for testing Auth0Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class Auth0ApiTests : IDisposable
    {
        private Auth0Api instance;

        public Auth0ApiTests()
        {
            instance = new Auth0Api();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Auth0Api
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' Auth0Api
            //Assert.IsType<Auth0Api>(instance);
        }

        /// <summary>
        /// Test Auth0Logout
        /// </summary>
        [Fact]
        public void Auth0LogoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string clientId = null;
            //string returnTo = null;
            //var response = instance.Auth0Logout(clientId, returnTo);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test AuthorizeAuth0
        /// </summary>
        [Fact]
        public void AuthorizeAuth0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string audience = null;
            //List<string> scope = null;
            //string responseType = null;
            //string clientId = null;
            //string codeChallengeMethod = null;
            //string codeChallenge = null;
            //string responseMode = null;
            //string state = null;
            //string redirectUri = null;
            //string connection = null;
            //string prompt = null;
            //var response = instance.AuthorizeAuth0(audience, scope, responseType, clientId, codeChallengeMethod, codeChallenge, responseMode, state, redirectUri, connection, prompt);
            //Assert.IsType<ResultedPKCE>(response);
        }

        /// <summary>
        /// Test ExchangeForAuth0Token
        /// </summary>
        [Fact]
        public void ExchangeForAuth0TokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string grantType = null;
            //string clientId = null;
            //string code = null;
            //string redirectUri = null;
            //string codeVerifier = null;
            //EmbeddedModelSchema schema = null;
            //string audience = null;
            //var response = instance.ExchangeForAuth0Token(grantType, clientId, code, redirectUri, codeVerifier, schema, audience);
            //Assert.IsType<OAuthToken>(response);
        }

        /// <summary>
        /// Test GetAuth0UserInfo
        /// </summary>
        [Fact]
        public void GetAuth0UserInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAuth0UserInfo();
            //Assert.IsType<Auth0User>(response);
        }
    }
}
