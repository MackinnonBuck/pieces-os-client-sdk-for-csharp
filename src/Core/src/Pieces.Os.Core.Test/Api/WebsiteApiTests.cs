/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Pieces.Os.Core.Client;
using Pieces.Os.Core.Api;
// uncomment below to import models
//using Pieces.Os.Core.SdkModel;

namespace Pieces.Os.Core.Test.Api
{
    /// <summary>
    ///  Class for testing WebsiteApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WebsiteApiTests : IDisposable
    {
        private WebsiteApi instance;

        public WebsiteApiTests()
        {
            instance = new WebsiteApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WebsiteApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' WebsiteApi
            //Assert.IsType<WebsiteApi>(instance);
        }

        /// <summary>
        /// Test WebsiteAssociateAsset
        /// </summary>
        [Fact]
        public void WebsiteAssociateAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //string website = null;
            //instance.WebsiteAssociateAsset(asset, website);
        }

        /// <summary>
        /// Test WebsiteAssociateConversation
        /// </summary>
        [Fact]
        public void WebsiteAssociateConversationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string website = null;
            //string conversation = null;
            //instance.WebsiteAssociateConversation(website, conversation);
        }

        /// <summary>
        /// Test WebsiteAssociatePerson
        /// </summary>
        [Fact]
        public void WebsiteAssociatePersonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string website = null;
            //string person = null;
            //instance.WebsiteAssociatePerson(website, person);
        }

        /// <summary>
        /// Test WebsiteAssociateWorkstreamSummary
        /// </summary>
        [Fact]
        public void WebsiteAssociateWorkstreamSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string website = null;
            //string workstreamSummary = null;
            //instance.WebsiteAssociateWorkstreamSummary(website, workstreamSummary);
        }

        /// <summary>
        /// Test WebsiteDisassociateAsset
        /// </summary>
        [Fact]
        public void WebsiteDisassociateAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string website = null;
            //Guid asset = null;
            //instance.WebsiteDisassociateAsset(website, asset);
        }

        /// <summary>
        /// Test WebsiteDisassociateConversation
        /// </summary>
        [Fact]
        public void WebsiteDisassociateConversationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string website = null;
            //string conversation = null;
            //instance.WebsiteDisassociateConversation(website, conversation);
        }

        /// <summary>
        /// Test WebsiteDisassociatePerson
        /// </summary>
        [Fact]
        public void WebsiteDisassociatePersonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string website = null;
            //string person = null;
            //instance.WebsiteDisassociatePerson(website, person);
        }

        /// <summary>
        /// Test WebsiteDisassociateWorkstreamSummary
        /// </summary>
        [Fact]
        public void WebsiteDisassociateWorkstreamSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string website = null;
            //string workstreamSummary = null;
            //instance.WebsiteDisassociateWorkstreamSummary(website, workstreamSummary);
        }

        /// <summary>
        /// Test WebsiteScoresIncrement
        /// </summary>
        [Fact]
        public void WebsiteScoresIncrementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string website = null;
            //SeededScoreIncrement seededScoreIncrement = null;
            //instance.WebsiteScoresIncrement(website, seededScoreIncrement);
        }

        /// <summary>
        /// Test WebsiteUpdate
        /// </summary>
        [Fact]
        public void WebsiteUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? transferables = null;
            //Website website = null;
            //var response = instance.WebsiteUpdate(transferables, website);
            //Assert.IsType<Website>(response);
        }

        /// <summary>
        /// Test WebsitesSpecificWebsiteSnapshot
        /// </summary>
        [Fact]
        public void WebsitesSpecificWebsiteSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string website = null;
            //bool? transferables = null;
            //var response = instance.WebsitesSpecificWebsiteSnapshot(website, transferables);
            //Assert.IsType<Website>(response);
        }
    }
}
