/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Pieces.Os.Core.Client;
using Pieces.Os.Core.Api;
// uncomment below to import models
//using Pieces.Os.Core.SdkModel;

namespace Pieces.Os.Core.Test.Api
{
    /// <summary>
    ///  Class for testing AssetApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AssetApiTests : IDisposable
    {
        private AssetApi instance;

        public AssetApiTests()
        {
            instance = new AssetApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AssetApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AssetApi
            //Assert.IsType<AssetApi>(instance);
        }

        /// <summary>
        /// Test AssetAssociateAnchor
        /// </summary>
        [Fact]
        public void AssetAssociateAnchorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //string anchor = null;
            //instance.AssetAssociateAnchor(asset, anchor);
        }

        /// <summary>
        /// Test AssetAssociateConversation
        /// </summary>
        [Fact]
        public void AssetAssociateConversationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //string conversation = null;
            //instance.AssetAssociateConversation(asset, conversation);
        }

        /// <summary>
        /// Test AssetAssociatePerson
        /// </summary>
        [Fact]
        public void AssetAssociatePersonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //string person = null;
            //instance.AssetAssociatePerson(asset, person);
        }

        /// <summary>
        /// Test AssetAssociateTag
        /// </summary>
        [Fact]
        public void AssetAssociateTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //string tag = null;
            //instance.AssetAssociateTag(asset, tag);
        }

        /// <summary>
        /// Test AssetAssociateWebsite
        /// </summary>
        [Fact]
        public void AssetAssociateWebsiteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //string website = null;
            //instance.AssetAssociateWebsite(asset, website);
        }

        /// <summary>
        /// Test AssetAssociateWorkstreamSummary
        /// </summary>
        [Fact]
        public void AssetAssociateWorkstreamSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //string workstreamSummary = null;
            //instance.AssetAssociateWorkstreamSummary(asset, workstreamSummary);
        }

        /// <summary>
        /// Test AssetDisassociateAnchor
        /// </summary>
        [Fact]
        public void AssetDisassociateAnchorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //string anchor = null;
            //instance.AssetDisassociateAnchor(asset, anchor);
        }

        /// <summary>
        /// Test AssetDisassociateConversation
        /// </summary>
        [Fact]
        public void AssetDisassociateConversationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //string conversation = null;
            //instance.AssetDisassociateConversation(asset, conversation);
        }

        /// <summary>
        /// Test AssetDisassociatePerson
        /// </summary>
        [Fact]
        public void AssetDisassociatePersonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //string person = null;
            //instance.AssetDisassociatePerson(asset, person);
        }

        /// <summary>
        /// Test AssetDisassociateTag
        /// </summary>
        [Fact]
        public void AssetDisassociateTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tag = null;
            //Guid asset = null;
            //instance.AssetDisassociateTag(tag, asset);
        }

        /// <summary>
        /// Test AssetDisassociateWebsite
        /// </summary>
        [Fact]
        public void AssetDisassociateWebsiteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string website = null;
            //Guid asset = null;
            //instance.AssetDisassociateWebsite(website, asset);
        }

        /// <summary>
        /// Test AssetDisassociateWorkstreamSummary
        /// </summary>
        [Fact]
        public void AssetDisassociateWorkstreamSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //string workstreamSummary = null;
            //instance.AssetDisassociateWorkstreamSummary(asset, workstreamSummary);
        }

        /// <summary>
        /// Test AssetFormats
        /// </summary>
        [Fact]
        public void AssetFormatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //bool? transferables = null;
            //var response = instance.AssetFormats(asset, transferables);
            //Assert.IsType<Formats>(response);
        }

        /// <summary>
        /// Test AssetReclassify
        /// </summary>
        [Fact]
        public void AssetReclassifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? transferables = null;
            //AssetReclassification assetReclassification = null;
            //var response = instance.AssetReclassify(transferables, assetReclassification);
            //Assert.IsType<Asset>(response);
        }

        /// <summary>
        /// Test AssetScoresIncrement
        /// </summary>
        [Fact]
        public void AssetScoresIncrementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //SeededScoreIncrement seededScoreIncrement = null;
            //instance.AssetScoresIncrement(asset, seededScoreIncrement);
        }

        /// <summary>
        /// Test AssetSnapshot
        /// </summary>
        [Fact]
        public void AssetSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //bool? transferables = null;
            //var response = instance.AssetSnapshot(asset, transferables);
            //Assert.IsType<Asset>(response);
        }

        /// <summary>
        /// Test AssetSnapshotPost
        /// </summary>
        [Fact]
        public void AssetSnapshotPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //bool? transferables = null;
            //SeededAccessor seededAccessor = null;
            //var response = instance.AssetSnapshotPost(asset, transferables, seededAccessor);
            //Assert.IsType<Asset>(response);
        }

        /// <summary>
        /// Test AssetSpecificAssetActivities
        /// </summary>
        [Fact]
        public void AssetSpecificAssetActivitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //bool? transferables = null;
            //var response = instance.AssetSpecificAssetActivities(asset, transferables);
            //Assert.IsType<Activities>(response);
        }

        /// <summary>
        /// Test AssetSpecificAssetConversations
        /// </summary>
        [Fact]
        public void AssetSpecificAssetConversationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //bool? transferables = null;
            //var response = instance.AssetSpecificAssetConversations(asset, transferables);
            //Assert.IsType<Conversations>(response);
        }

        /// <summary>
        /// Test AssetSpecificAssetExport
        /// </summary>
        [Fact]
        public void AssetSpecificAssetExportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //string exportType = null;
            //var response = instance.AssetSpecificAssetExport(asset, exportType);
            //Assert.IsType<ExportedAsset>(response);
        }

        /// <summary>
        /// Test AssetUpdate
        /// </summary>
        [Fact]
        public void AssetUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? transferables = null;
            //Asset asset = null;
            //var response = instance.AssetUpdate(transferables, asset);
            //Assert.IsType<Asset>(response);
        }
    }
}
