/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Pieces.Os.Core.Client;
using Pieces.Os.Core.Api;
// uncomment below to import models
//using Pieces.Os.Core.SdkModel;

namespace Pieces.Os.Core.Test.Api
{
    /// <summary>
    ///  Class for testing TagApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TagApiTests : IDisposable
    {
        private TagApi instance;

        public TagApiTests()
        {
            instance = new TagApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TagApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TagApi
            //Assert.IsType<TagApi>(instance);
        }

        /// <summary>
        /// Test TagAssociateAsset
        /// </summary>
        [Fact]
        public void TagAssociateAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid asset = null;
            //string tag = null;
            //instance.TagAssociateAsset(asset, tag);
        }

        /// <summary>
        /// Test TagAssociatePerson
        /// </summary>
        [Fact]
        public void TagAssociatePersonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tag = null;
            //string person = null;
            //instance.TagAssociatePerson(tag, person);
        }

        /// <summary>
        /// Test TagDisassociateAsset
        /// </summary>
        [Fact]
        public void TagDisassociateAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tag = null;
            //Guid asset = null;
            //instance.TagDisassociateAsset(tag, asset);
        }

        /// <summary>
        /// Test TagDisassociatePerson
        /// </summary>
        [Fact]
        public void TagDisassociatePersonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tag = null;
            //string person = null;
            //instance.TagDisassociatePerson(tag, person);
        }

        /// <summary>
        /// Test TagScoresIncrement
        /// </summary>
        [Fact]
        public void TagScoresIncrementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tag = null;
            //SeededScoreIncrement seededScoreIncrement = null;
            //instance.TagScoresIncrement(tag, seededScoreIncrement);
        }

        /// <summary>
        /// Test TagUpdate
        /// </summary>
        [Fact]
        public void TagUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? transferables = null;
            //Tag tag = null;
            //var response = instance.TagUpdate(transferables, tag);
            //Assert.IsType<Tag>(response);
        }

        /// <summary>
        /// Test TagsSpecificTagSnapshot
        /// </summary>
        [Fact]
        public void TagsSpecificTagSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tag = null;
            //bool? transferables = null;
            //var response = instance.TagsSpecificTagSnapshot(tag, transferables);
            //Assert.IsType<Tag>(response);
        }
    }
}
