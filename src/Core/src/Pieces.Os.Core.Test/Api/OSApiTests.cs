/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Pieces.Os.Core.Client;
using Pieces.Os.Core.Api;
// uncomment below to import models
//using Pieces.Os.Core.SdkModel;

namespace Pieces.Os.Core.Test.Api
{
    /// <summary>
    ///  Class for testing OSApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OSApiTests : IDisposable
    {
        private OSApi instance;

        public OSApiTests()
        {
            instance = new OSApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of OSApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' OSApi
            //Assert.IsType<OSApi>(instance);
        }

        /// <summary>
        /// Test LinkProvider
        /// </summary>
        [Fact]
        public void LinkProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SeededExternalProvider seededExternalProvider = null;
            //var response = instance.LinkProvider(seededExternalProvider);
            //Assert.IsType<ReturnedUserProfile>(response);
        }

        /// <summary>
        /// Test OsAppletLaunch
        /// </summary>
        [Fact]
        public void OsAppletLaunchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InactiveOSServerApplet inactiveOSServerApplet = null;
            //var response = instance.OsAppletLaunch(inactiveOSServerApplet);
            //Assert.IsType<ActiveOSServerApplet>(response);
        }

        /// <summary>
        /// Test OsAppletRestart
        /// </summary>
        [Fact]
        public void OsAppletRestartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InactiveOSServerApplet inactiveOSServerApplet = null;
            //var response = instance.OsAppletRestart(inactiveOSServerApplet);
            //Assert.IsType<ActiveOSServerApplet>(response);
        }

        /// <summary>
        /// Test OsAppletTerminate
        /// </summary>
        [Fact]
        public void OsAppletTerminateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TerminatingOSServerApplet terminatingOSServerApplet = null;
            //instance.OsAppletTerminate(terminatingOSServerApplet);
        }

        /// <summary>
        /// Test OsBrowserUrlOpen
        /// </summary>
        [Fact]
        public void OsBrowserUrlOpenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string body = null;
            //instance.OsBrowserUrlOpen(body);
        }

        /// <summary>
        /// Test OsDeviceInformation
        /// </summary>
        [Fact]
        public void OsDeviceInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.OsDeviceInformation();
            //Assert.IsType<OSDeviceInformationReturnable>(response);
        }

        /// <summary>
        /// Test OsFilesystemFileOpen
        /// </summary>
        [Fact]
        public void OsFilesystemFileOpenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string body = null;
            //instance.OsFilesystemFileOpen(body);
        }

        /// <summary>
        /// Test OsFilesystemFileReadStreamed
        /// </summary>
        [Fact]
        public void OsFilesystemFileReadStreamedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string body = null;
            //var response = instance.OsFilesystemFileReadStreamed(body);
            //Assert.IsType<OSFileReadStreamedProgress>(response);
        }

        /// <summary>
        /// Test OsFilesystemPathVerify
        /// </summary>
        [Fact]
        public void OsFilesystemPathVerifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string body = null;
            //var response = instance.OsFilesystemPathVerify(body);
            //Assert.IsType<VerifiedOSFilesystemPath>(response);
        }

        /// <summary>
        /// Test OsFilesystemPickFiles
        /// </summary>
        [Fact]
        public void OsFilesystemPickFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FilePickerInput filePickerInput = null;
            //var response = instance.OsFilesystemPickFiles(filePickerInput);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test OsFilesystemPickFolders
        /// </summary>
        [Fact]
        public void OsFilesystemPickFoldersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.OsFilesystemPickFolders();
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test OsMemoryOptimize
        /// </summary>
        [Fact]
        public void OsMemoryOptimizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.OsMemoryOptimize();
        }

        /// <summary>
        /// Test OsMetadata
        /// </summary>
        [Fact]
        public void OsMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.OsMetadata();
            //Assert.IsType<OSServerMetadata>(response);
        }

        /// <summary>
        /// Test OsPermissions
        /// </summary>
        [Fact]
        public void OsPermissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.OsPermissions();
            //Assert.IsType<OSPermissions>(response);
        }

        /// <summary>
        /// Test OsPermissionsRequest
        /// </summary>
        [Fact]
        public void OsPermissionsRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OSPermissions oSPermissions = null;
            //var response = instance.OsPermissionsRequest(oSPermissions);
            //Assert.IsType<OSPermissions>(response);
        }

        /// <summary>
        /// Test OsRestart
        /// </summary>
        [Fact]
        public void OsRestartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.OsRestart();
        }

        /// <summary>
        /// Test OsSettingsSnapshot
        /// </summary>
        [Fact]
        public void OsSettingsSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.OsSettingsSnapshot();
            //Assert.IsType<OSServerSettings>(response);
        }

        /// <summary>
        /// Test OsSettingsStream
        /// </summary>
        [Fact]
        public void OsSettingsStreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.OsSettingsStream();
            //Assert.IsType<OSServerSettings>(response);
        }

        /// <summary>
        /// Test OsSettingsUpdate
        /// </summary>
        [Fact]
        public void OsSettingsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OSServerSettings oSServerSettings = null;
            //var response = instance.OsSettingsUpdate(oSServerSettings);
            //Assert.IsType<OSServerSettings>(response);
        }

        /// <summary>
        /// Test OsUpdateCheck
        /// </summary>
        [Fact]
        public void OsUpdateCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UncheckedOSServerUpdate uncheckedOSServerUpdate = null;
            //var response = instance.OsUpdateCheck(uncheckedOSServerUpdate);
            //Assert.IsType<OSServerUpdateStatus>(response);
        }

        /// <summary>
        /// Test OsUpdateCheckStream
        /// </summary>
        [Fact]
        public void OsUpdateCheckStreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.OsUpdateCheckStream();
            //Assert.IsType<OSServerUpdateStatus>(response);
        }

        /// <summary>
        /// Test SignIntoOS
        /// </summary>
        [Fact]
        public void SignIntoOSTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SignIntoOS();
            //Assert.IsType<UserProfile>(response);
        }

        /// <summary>
        /// Test SignOutOfOS
        /// </summary>
        [Fact]
        public void SignOutOfOSTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SignOutOfOS();
            //Assert.IsType<Users>(response);
        }
    }
}
