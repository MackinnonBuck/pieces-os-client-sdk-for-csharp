/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Pieces.Os.Core.Client;
using Pieces.Os.Core.Api;
// uncomment below to import models
//using Pieces.Os.Core.SdkModel;

namespace Pieces.Os.Core.Test.Api
{
    /// <summary>
    ///  Class for testing WorkstreamPatternEngineApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WorkstreamPatternEngineApiTests : IDisposable
    {
        private WorkstreamPatternEngineApi instance;

        public WorkstreamPatternEngineApiTests()
        {
            instance = new WorkstreamPatternEngineApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WorkstreamPatternEngineApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' WorkstreamPatternEngineApi
            //Assert.IsType<WorkstreamPatternEngineApi>(instance);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineCreateIngestion
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineCreateIngestionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SeededWorkstreamIngestion seededWorkstreamIngestion = null;
            //var response = instance.WorkstreamPatternEngineCreateIngestion(seededWorkstreamIngestion);
            //Assert.IsType<WorkstreamIngestion>(response);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineProcessorsSources
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineProcessorsSourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.WorkstreamPatternEngineProcessorsSources();
            //Assert.IsType<WorkstreamPatternEngineSources>(response);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineProcessorsVisionActivate
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineProcessorsVisionActivateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WorkstreamPatternEngineStatus workstreamPatternEngineStatus = null;
            //var response = instance.WorkstreamPatternEngineProcessorsVisionActivate(workstreamPatternEngineStatus);
            //Assert.IsType<WorkstreamPatternEngineStatus>(response);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineProcessorsVisionCalibrationCapture
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineProcessorsVisionCalibrationCaptureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.WorkstreamPatternEngineProcessorsVisionCalibrationCapture();
            //Assert.IsType<WorkstreamPatternEngineVisionCalibration>(response);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineProcessorsVisionCalibrationsFocused
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineProcessorsVisionCalibrationsFocusedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.WorkstreamPatternEngineProcessorsVisionCalibrationsFocused();
            //Assert.IsType<WorkstreamPatternEngineVisionCalibration>(response);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineProcessorsVisionCalibrationsSnapshot
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineProcessorsVisionCalibrationsSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.WorkstreamPatternEngineProcessorsVisionCalibrationsSnapshot();
            //Assert.IsType<WorkstreamPatternEngineVisionCalibrations>(response);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineProcessorsVisionDataClear
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineProcessorsVisionDataClearTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WorkstreamPatternEngineDataCleanupRequest workstreamPatternEngineDataCleanupRequest = null;
            //instance.WorkstreamPatternEngineProcessorsVisionDataClear(workstreamPatternEngineDataCleanupRequest);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineProcessorsVisionDeactivate
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineProcessorsVisionDeactivateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WorkstreamPatternEngineStatus workstreamPatternEngineStatus = null;
            //var response = instance.WorkstreamPatternEngineProcessorsVisionDeactivate(workstreamPatternEngineStatus);
            //Assert.IsType<WorkstreamPatternEngineStatus>(response);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineProcessorsVisionEventDeleteSpecificVisionEvent
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineProcessorsVisionEventDeleteSpecificVisionEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string visionEvent = null;
            //instance.WorkstreamPatternEngineProcessorsVisionEventDeleteSpecificVisionEvent(visionEvent);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineProcessorsVisionEventsScopedDelete
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineProcessorsVisionEventsScopedDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WorkstreamPatternEngineVisionEventDeletions workstreamPatternEngineVisionEventDeletions = null;
            //var response = instance.WorkstreamPatternEngineProcessorsVisionEventsScopedDelete(workstreamPatternEngineVisionEventDeletions);
            //Assert.IsType<FlattenedWorkstreamPatternEngineVisionEvents>(response);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineProcessorsVisionEventsSearch
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineProcessorsVisionEventsSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? transferables = null;
            //SearchInput searchInput = null;
            //var response = instance.WorkstreamPatternEngineProcessorsVisionEventsSearch(transferables, searchInput);
            //Assert.IsType<SearchedWorkstreamPatternEngineVisionEvents>(response);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineProcessorsVisionEventsSnapshot
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineProcessorsVisionEventsSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? transferables = null;
            //var response = instance.WorkstreamPatternEngineProcessorsVisionEventsSnapshot(transferables);
            //Assert.IsType<WorkstreamPatternEngineVisionEvents>(response);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineProcessorsVisionEventsSpecificSnapshot
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineProcessorsVisionEventsSpecificSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string visionEvent = null;
            //bool? transferables = null;
            //var response = instance.WorkstreamPatternEngineProcessorsVisionEventsSpecificSnapshot(visionEvent, transferables);
            //Assert.IsType<WorkstreamPatternEngineVisionEvent>(response);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineProcessorsVisionMetadata
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineProcessorsVisionMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.WorkstreamPatternEngineProcessorsVisionMetadata();
            //Assert.IsType<WorkstreamPatternEngineVisionMetadata>(response);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineProcessorsVisionStatus
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineProcessorsVisionStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.WorkstreamPatternEngineProcessorsVisionStatus();
            //Assert.IsType<WorkstreamPatternEngineStatus>(response);
        }

        /// <summary>
        /// Test WorkstreamPatternEngineProcessorsVisionStatusStream
        /// </summary>
        [Fact]
        public void WorkstreamPatternEngineProcessorsVisionStatusStreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.WorkstreamPatternEngineProcessorsVisionStatusStream();
            //Assert.IsType<WorkstreamPatternEngineStatus>(response);
        }
    }
}
