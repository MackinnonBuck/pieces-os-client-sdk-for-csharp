/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Pieces.Os.Core.Client;
using Pieces.Os.Core.Client.Auth;
using Pieces.Os.Core.SdkModel;

namespace Pieces.Os.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkstreamPatternEngineSourceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// &#39;/workstream_pattern_engine/source/{source}/scores/increment&#39; [POST]
        /// </summary>
        /// <remarks>
        /// This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
        /// </remarks>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This is a identifier that is used to identify a specific WorkstreamPatternEngineSource</param>
        /// <param name="seededScoreIncrement"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void WorkstreamPatternEngineSourceScoresIncrement(string source, SeededScoreIncrement seededScoreIncrement = default(SeededScoreIncrement), int operationIndex = 0);

        /// <summary>
        /// &#39;/workstream_pattern_engine/source/{source}/scores/increment&#39; [POST]
        /// </summary>
        /// <remarks>
        /// This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
        /// </remarks>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This is a identifier that is used to identify a specific WorkstreamPatternEngineSource</param>
        /// <param name="seededScoreIncrement"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkstreamPatternEngineSourceScoresIncrementWithHttpInfo(string source, SeededScoreIncrement seededScoreIncrement = default(SeededScoreIncrement), int operationIndex = 0);
        /// <summary>
        /// /workstream_pattern_engine/source/update [POST]
        /// </summary>
        /// <remarks>
        /// This will update a specific workstream pattern engine source.
        /// </remarks>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferables">This is a boolean that will decided if we are want to return the transferable data (default) or not(performance enhancement) (optional)</param>
        /// <param name="identifiedWorkstreamPatternEngineSource"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdentifiedWorkstreamPatternEngineSource</returns>
        IdentifiedWorkstreamPatternEngineSource WorkstreamPatternEngineSourceUpdate(bool? transferables = default(bool?), IdentifiedWorkstreamPatternEngineSource identifiedWorkstreamPatternEngineSource = default(IdentifiedWorkstreamPatternEngineSource), int operationIndex = 0);

        /// <summary>
        /// /workstream_pattern_engine/source/update [POST]
        /// </summary>
        /// <remarks>
        /// This will update a specific workstream pattern engine source.
        /// </remarks>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferables">This is a boolean that will decided if we are want to return the transferable data (default) or not(performance enhancement) (optional)</param>
        /// <param name="identifiedWorkstreamPatternEngineSource"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdentifiedWorkstreamPatternEngineSource</returns>
        ApiResponse<IdentifiedWorkstreamPatternEngineSource> WorkstreamPatternEngineSourceUpdateWithHttpInfo(bool? transferables = default(bool?), IdentifiedWorkstreamPatternEngineSource identifiedWorkstreamPatternEngineSource = default(IdentifiedWorkstreamPatternEngineSource), int operationIndex = 0);
        /// <summary>
        /// /workstream_pattern_engine/source/{source} [GET]
        /// </summary>
        /// <remarks>
        /// This will get a snapshot of a single workstream pattern engine source.
        /// </remarks>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This is a identifier that is used to identify a specific WorkstreamPatternEngineSource</param>
        /// <param name="transferables">This is a boolean that will decided if we are want to return the transferable data (default) or not(performance enhancement) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdentifiedWorkstreamPatternEngineSource</returns>
        IdentifiedWorkstreamPatternEngineSource WorkstreamPatternEngineSourcesSpecificSourceSnapshot(string source, bool? transferables = default(bool?), int operationIndex = 0);

        /// <summary>
        /// /workstream_pattern_engine/source/{source} [GET]
        /// </summary>
        /// <remarks>
        /// This will get a snapshot of a single workstream pattern engine source.
        /// </remarks>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This is a identifier that is used to identify a specific WorkstreamPatternEngineSource</param>
        /// <param name="transferables">This is a boolean that will decided if we are want to return the transferable data (default) or not(performance enhancement) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdentifiedWorkstreamPatternEngineSource</returns>
        ApiResponse<IdentifiedWorkstreamPatternEngineSource> WorkstreamPatternEngineSourcesSpecificSourceSnapshotWithHttpInfo(string source, bool? transferables = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkstreamPatternEngineSourceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// &#39;/workstream_pattern_engine/source/{source}/scores/increment&#39; [POST]
        /// </summary>
        /// <remarks>
        /// This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
        /// </remarks>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This is a identifier that is used to identify a specific WorkstreamPatternEngineSource</param>
        /// <param name="seededScoreIncrement"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkstreamPatternEngineSourceScoresIncrementAsync(string source, SeededScoreIncrement seededScoreIncrement = default(SeededScoreIncrement), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// &#39;/workstream_pattern_engine/source/{source}/scores/increment&#39; [POST]
        /// </summary>
        /// <remarks>
        /// This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
        /// </remarks>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This is a identifier that is used to identify a specific WorkstreamPatternEngineSource</param>
        /// <param name="seededScoreIncrement"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkstreamPatternEngineSourceScoresIncrementWithHttpInfoAsync(string source, SeededScoreIncrement seededScoreIncrement = default(SeededScoreIncrement), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// /workstream_pattern_engine/source/update [POST]
        /// </summary>
        /// <remarks>
        /// This will update a specific workstream pattern engine source.
        /// </remarks>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferables">This is a boolean that will decided if we are want to return the transferable data (default) or not(performance enhancement) (optional)</param>
        /// <param name="identifiedWorkstreamPatternEngineSource"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentifiedWorkstreamPatternEngineSource</returns>
        System.Threading.Tasks.Task<IdentifiedWorkstreamPatternEngineSource> WorkstreamPatternEngineSourceUpdateAsync(bool? transferables = default(bool?), IdentifiedWorkstreamPatternEngineSource identifiedWorkstreamPatternEngineSource = default(IdentifiedWorkstreamPatternEngineSource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// /workstream_pattern_engine/source/update [POST]
        /// </summary>
        /// <remarks>
        /// This will update a specific workstream pattern engine source.
        /// </remarks>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferables">This is a boolean that will decided if we are want to return the transferable data (default) or not(performance enhancement) (optional)</param>
        /// <param name="identifiedWorkstreamPatternEngineSource"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentifiedWorkstreamPatternEngineSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentifiedWorkstreamPatternEngineSource>> WorkstreamPatternEngineSourceUpdateWithHttpInfoAsync(bool? transferables = default(bool?), IdentifiedWorkstreamPatternEngineSource identifiedWorkstreamPatternEngineSource = default(IdentifiedWorkstreamPatternEngineSource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// /workstream_pattern_engine/source/{source} [GET]
        /// </summary>
        /// <remarks>
        /// This will get a snapshot of a single workstream pattern engine source.
        /// </remarks>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This is a identifier that is used to identify a specific WorkstreamPatternEngineSource</param>
        /// <param name="transferables">This is a boolean that will decided if we are want to return the transferable data (default) or not(performance enhancement) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentifiedWorkstreamPatternEngineSource</returns>
        System.Threading.Tasks.Task<IdentifiedWorkstreamPatternEngineSource> WorkstreamPatternEngineSourcesSpecificSourceSnapshotAsync(string source, bool? transferables = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// /workstream_pattern_engine/source/{source} [GET]
        /// </summary>
        /// <remarks>
        /// This will get a snapshot of a single workstream pattern engine source.
        /// </remarks>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This is a identifier that is used to identify a specific WorkstreamPatternEngineSource</param>
        /// <param name="transferables">This is a boolean that will decided if we are want to return the transferable data (default) or not(performance enhancement) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentifiedWorkstreamPatternEngineSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentifiedWorkstreamPatternEngineSource>> WorkstreamPatternEngineSourcesSpecificSourceSnapshotWithHttpInfoAsync(string source, bool? transferables = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkstreamPatternEngineSourceApi : IWorkstreamPatternEngineSourceApiSync, IWorkstreamPatternEngineSourceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkstreamPatternEngineSourceApi : IWorkstreamPatternEngineSourceApi
    {
        private Pieces.Os.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkstreamPatternEngineSourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkstreamPatternEngineSourceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkstreamPatternEngineSourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkstreamPatternEngineSourceApi(string basePath)
        {
            this.Configuration = Pieces.Os.Core.Client.Configuration.MergeConfigurations(
                Pieces.Os.Core.Client.GlobalConfiguration.Instance,
                new Pieces.Os.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Pieces.Os.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Pieces.Os.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Pieces.Os.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkstreamPatternEngineSourceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkstreamPatternEngineSourceApi(Pieces.Os.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Pieces.Os.Core.Client.Configuration.MergeConfigurations(
                Pieces.Os.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Pieces.Os.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Pieces.Os.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Pieces.Os.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkstreamPatternEngineSourceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WorkstreamPatternEngineSourceApi(Pieces.Os.Core.Client.ISynchronousClient client, Pieces.Os.Core.Client.IAsynchronousClient asyncClient, Pieces.Os.Core.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Pieces.Os.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Pieces.Os.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Pieces.Os.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Pieces.Os.Core.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Pieces.Os.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// &#39;/workstream_pattern_engine/source/{source}/scores/increment&#39; [POST] This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
        /// </summary>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This is a identifier that is used to identify a specific WorkstreamPatternEngineSource</param>
        /// <param name="seededScoreIncrement"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void WorkstreamPatternEngineSourceScoresIncrement(string source, SeededScoreIncrement seededScoreIncrement = default(SeededScoreIncrement), int operationIndex = 0)
        {
            WorkstreamPatternEngineSourceScoresIncrementWithHttpInfo(source, seededScoreIncrement);
        }

        /// <summary>
        /// &#39;/workstream_pattern_engine/source/{source}/scores/increment&#39; [POST] This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
        /// </summary>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This is a identifier that is used to identify a specific WorkstreamPatternEngineSource</param>
        /// <param name="seededScoreIncrement"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Pieces.Os.Core.Client.ApiResponse<Object> WorkstreamPatternEngineSourceScoresIncrementWithHttpInfo(string source, SeededScoreIncrement seededScoreIncrement = default(SeededScoreIncrement), int operationIndex = 0)
        {
            // verify the required parameter 'source' is set
            if (source == null)
            {
                throw new Pieces.Os.Core.Client.ApiException(400, "Missing required parameter 'source' when calling WorkstreamPatternEngineSourceApi->WorkstreamPatternEngineSourceScoresIncrement");
            }

            Pieces.Os.Core.Client.RequestOptions localVarRequestOptions = new Pieces.Os.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Pieces.Os.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Pieces.Os.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("source", Pieces.Os.Core.Client.ClientUtils.ParameterToString(source)); // path parameter
            localVarRequestOptions.Data = seededScoreIncrement;

            localVarRequestOptions.Operation = "WorkstreamPatternEngineSourceApi.WorkstreamPatternEngineSourceScoresIncrement";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-ID", this.Configuration.GetApiKeyWithPrefix("X-Application-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/workstream_pattern_engine/source/{source}/scores/increment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkstreamPatternEngineSourceScoresIncrement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// &#39;/workstream_pattern_engine/source/{source}/scores/increment&#39; [POST] This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
        /// </summary>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This is a identifier that is used to identify a specific WorkstreamPatternEngineSource</param>
        /// <param name="seededScoreIncrement"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkstreamPatternEngineSourceScoresIncrementAsync(string source, SeededScoreIncrement seededScoreIncrement = default(SeededScoreIncrement), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await WorkstreamPatternEngineSourceScoresIncrementWithHttpInfoAsync(source, seededScoreIncrement, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// &#39;/workstream_pattern_engine/source/{source}/scores/increment&#39; [POST] This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
        /// </summary>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This is a identifier that is used to identify a specific WorkstreamPatternEngineSource</param>
        /// <param name="seededScoreIncrement"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Pieces.Os.Core.Client.ApiResponse<Object>> WorkstreamPatternEngineSourceScoresIncrementWithHttpInfoAsync(string source, SeededScoreIncrement seededScoreIncrement = default(SeededScoreIncrement), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'source' is set
            if (source == null)
            {
                throw new Pieces.Os.Core.Client.ApiException(400, "Missing required parameter 'source' when calling WorkstreamPatternEngineSourceApi->WorkstreamPatternEngineSourceScoresIncrement");
            }


            Pieces.Os.Core.Client.RequestOptions localVarRequestOptions = new Pieces.Os.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Pieces.Os.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Pieces.Os.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("source", Pieces.Os.Core.Client.ClientUtils.ParameterToString(source)); // path parameter
            localVarRequestOptions.Data = seededScoreIncrement;

            localVarRequestOptions.Operation = "WorkstreamPatternEngineSourceApi.WorkstreamPatternEngineSourceScoresIncrement";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-ID", this.Configuration.GetApiKeyWithPrefix("X-Application-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/workstream_pattern_engine/source/{source}/scores/increment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkstreamPatternEngineSourceScoresIncrement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /workstream_pattern_engine/source/update [POST] This will update a specific workstream pattern engine source.
        /// </summary>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferables">This is a boolean that will decided if we are want to return the transferable data (default) or not(performance enhancement) (optional)</param>
        /// <param name="identifiedWorkstreamPatternEngineSource"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdentifiedWorkstreamPatternEngineSource</returns>
        public IdentifiedWorkstreamPatternEngineSource WorkstreamPatternEngineSourceUpdate(bool? transferables = default(bool?), IdentifiedWorkstreamPatternEngineSource identifiedWorkstreamPatternEngineSource = default(IdentifiedWorkstreamPatternEngineSource), int operationIndex = 0)
        {
            Pieces.Os.Core.Client.ApiResponse<IdentifiedWorkstreamPatternEngineSource> localVarResponse = WorkstreamPatternEngineSourceUpdateWithHttpInfo(transferables, identifiedWorkstreamPatternEngineSource);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /workstream_pattern_engine/source/update [POST] This will update a specific workstream pattern engine source.
        /// </summary>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferables">This is a boolean that will decided if we are want to return the transferable data (default) or not(performance enhancement) (optional)</param>
        /// <param name="identifiedWorkstreamPatternEngineSource"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdentifiedWorkstreamPatternEngineSource</returns>
        public Pieces.Os.Core.Client.ApiResponse<IdentifiedWorkstreamPatternEngineSource> WorkstreamPatternEngineSourceUpdateWithHttpInfo(bool? transferables = default(bool?), IdentifiedWorkstreamPatternEngineSource identifiedWorkstreamPatternEngineSource = default(IdentifiedWorkstreamPatternEngineSource), int operationIndex = 0)
        {
            Pieces.Os.Core.Client.RequestOptions localVarRequestOptions = new Pieces.Os.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = Pieces.Os.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Pieces.Os.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (transferables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pieces.Os.Core.Client.ClientUtils.ParameterToMultiMap("", "transferables", transferables));
            }
            localVarRequestOptions.Data = identifiedWorkstreamPatternEngineSource;

            localVarRequestOptions.Operation = "WorkstreamPatternEngineSourceApi.WorkstreamPatternEngineSourceUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-ID", this.Configuration.GetApiKeyWithPrefix("X-Application-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IdentifiedWorkstreamPatternEngineSource>("/workstream_pattern_engine/source/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkstreamPatternEngineSourceUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /workstream_pattern_engine/source/update [POST] This will update a specific workstream pattern engine source.
        /// </summary>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferables">This is a boolean that will decided if we are want to return the transferable data (default) or not(performance enhancement) (optional)</param>
        /// <param name="identifiedWorkstreamPatternEngineSource"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentifiedWorkstreamPatternEngineSource</returns>
        public async System.Threading.Tasks.Task<IdentifiedWorkstreamPatternEngineSource> WorkstreamPatternEngineSourceUpdateAsync(bool? transferables = default(bool?), IdentifiedWorkstreamPatternEngineSource identifiedWorkstreamPatternEngineSource = default(IdentifiedWorkstreamPatternEngineSource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Pieces.Os.Core.Client.ApiResponse<IdentifiedWorkstreamPatternEngineSource> localVarResponse = await WorkstreamPatternEngineSourceUpdateWithHttpInfoAsync(transferables, identifiedWorkstreamPatternEngineSource, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /workstream_pattern_engine/source/update [POST] This will update a specific workstream pattern engine source.
        /// </summary>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferables">This is a boolean that will decided if we are want to return the transferable data (default) or not(performance enhancement) (optional)</param>
        /// <param name="identifiedWorkstreamPatternEngineSource"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentifiedWorkstreamPatternEngineSource)</returns>
        public async System.Threading.Tasks.Task<Pieces.Os.Core.Client.ApiResponse<IdentifiedWorkstreamPatternEngineSource>> WorkstreamPatternEngineSourceUpdateWithHttpInfoAsync(bool? transferables = default(bool?), IdentifiedWorkstreamPatternEngineSource identifiedWorkstreamPatternEngineSource = default(IdentifiedWorkstreamPatternEngineSource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Pieces.Os.Core.Client.RequestOptions localVarRequestOptions = new Pieces.Os.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = Pieces.Os.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Pieces.Os.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (transferables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pieces.Os.Core.Client.ClientUtils.ParameterToMultiMap("", "transferables", transferables));
            }
            localVarRequestOptions.Data = identifiedWorkstreamPatternEngineSource;

            localVarRequestOptions.Operation = "WorkstreamPatternEngineSourceApi.WorkstreamPatternEngineSourceUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-ID", this.Configuration.GetApiKeyWithPrefix("X-Application-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IdentifiedWorkstreamPatternEngineSource>("/workstream_pattern_engine/source/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkstreamPatternEngineSourceUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /workstream_pattern_engine/source/{source} [GET] This will get a snapshot of a single workstream pattern engine source.
        /// </summary>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This is a identifier that is used to identify a specific WorkstreamPatternEngineSource</param>
        /// <param name="transferables">This is a boolean that will decided if we are want to return the transferable data (default) or not(performance enhancement) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdentifiedWorkstreamPatternEngineSource</returns>
        public IdentifiedWorkstreamPatternEngineSource WorkstreamPatternEngineSourcesSpecificSourceSnapshot(string source, bool? transferables = default(bool?), int operationIndex = 0)
        {
            Pieces.Os.Core.Client.ApiResponse<IdentifiedWorkstreamPatternEngineSource> localVarResponse = WorkstreamPatternEngineSourcesSpecificSourceSnapshotWithHttpInfo(source, transferables);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /workstream_pattern_engine/source/{source} [GET] This will get a snapshot of a single workstream pattern engine source.
        /// </summary>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This is a identifier that is used to identify a specific WorkstreamPatternEngineSource</param>
        /// <param name="transferables">This is a boolean that will decided if we are want to return the transferable data (default) or not(performance enhancement) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdentifiedWorkstreamPatternEngineSource</returns>
        public Pieces.Os.Core.Client.ApiResponse<IdentifiedWorkstreamPatternEngineSource> WorkstreamPatternEngineSourcesSpecificSourceSnapshotWithHttpInfo(string source, bool? transferables = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'source' is set
            if (source == null)
            {
                throw new Pieces.Os.Core.Client.ApiException(400, "Missing required parameter 'source' when calling WorkstreamPatternEngineSourceApi->WorkstreamPatternEngineSourcesSpecificSourceSnapshot");
            }

            Pieces.Os.Core.Client.RequestOptions localVarRequestOptions = new Pieces.Os.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = Pieces.Os.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Pieces.Os.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("source", Pieces.Os.Core.Client.ClientUtils.ParameterToString(source)); // path parameter
            if (transferables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pieces.Os.Core.Client.ClientUtils.ParameterToMultiMap("", "transferables", transferables));
            }

            localVarRequestOptions.Operation = "WorkstreamPatternEngineSourceApi.WorkstreamPatternEngineSourcesSpecificSourceSnapshot";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-ID", this.Configuration.GetApiKeyWithPrefix("X-Application-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IdentifiedWorkstreamPatternEngineSource>("/workstream_pattern_engine/source/{source}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkstreamPatternEngineSourcesSpecificSourceSnapshot", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /workstream_pattern_engine/source/{source} [GET] This will get a snapshot of a single workstream pattern engine source.
        /// </summary>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This is a identifier that is used to identify a specific WorkstreamPatternEngineSource</param>
        /// <param name="transferables">This is a boolean that will decided if we are want to return the transferable data (default) or not(performance enhancement) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentifiedWorkstreamPatternEngineSource</returns>
        public async System.Threading.Tasks.Task<IdentifiedWorkstreamPatternEngineSource> WorkstreamPatternEngineSourcesSpecificSourceSnapshotAsync(string source, bool? transferables = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Pieces.Os.Core.Client.ApiResponse<IdentifiedWorkstreamPatternEngineSource> localVarResponse = await WorkstreamPatternEngineSourcesSpecificSourceSnapshotWithHttpInfoAsync(source, transferables, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /workstream_pattern_engine/source/{source} [GET] This will get a snapshot of a single workstream pattern engine source.
        /// </summary>
        /// <exception cref="Pieces.Os.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This is a identifier that is used to identify a specific WorkstreamPatternEngineSource</param>
        /// <param name="transferables">This is a boolean that will decided if we are want to return the transferable data (default) or not(performance enhancement) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentifiedWorkstreamPatternEngineSource)</returns>
        public async System.Threading.Tasks.Task<Pieces.Os.Core.Client.ApiResponse<IdentifiedWorkstreamPatternEngineSource>> WorkstreamPatternEngineSourcesSpecificSourceSnapshotWithHttpInfoAsync(string source, bool? transferables = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'source' is set
            if (source == null)
            {
                throw new Pieces.Os.Core.Client.ApiException(400, "Missing required parameter 'source' when calling WorkstreamPatternEngineSourceApi->WorkstreamPatternEngineSourcesSpecificSourceSnapshot");
            }


            Pieces.Os.Core.Client.RequestOptions localVarRequestOptions = new Pieces.Os.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = Pieces.Os.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Pieces.Os.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("source", Pieces.Os.Core.Client.ClientUtils.ParameterToString(source)); // path parameter
            if (transferables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pieces.Os.Core.Client.ClientUtils.ParameterToMultiMap("", "transferables", transferables));
            }

            localVarRequestOptions.Operation = "WorkstreamPatternEngineSourceApi.WorkstreamPatternEngineSourcesSpecificSourceSnapshot";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-ID", this.Configuration.GetApiKeyWithPrefix("X-Application-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IdentifiedWorkstreamPatternEngineSource>("/workstream_pattern_engine/source/{source}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkstreamPatternEngineSourcesSpecificSourceSnapshot", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
