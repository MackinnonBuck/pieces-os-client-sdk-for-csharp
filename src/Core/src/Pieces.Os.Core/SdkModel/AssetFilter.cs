/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pieces.Os.Core.Client.OpenAPIDateConverter;

namespace Pieces.Os.Core.SdkModel
{
    /// <summary>
    /// ** in the future, consider adding an optional bool&#39;s called nextAnd, nextOr which will say that the next filter will be  AND behavor or OR behavior.  \&quot;operations\&quot;: here is is an optional property to allow or behavior,(we will only allow 1 level deep of or&#39;s), if or is not passed in then it is just simply ignored. If or is passed in then we will be or&#39;d together with the top level filter and considered extras. default behavior for operations is and, however yoour can specifiy OR operations as well.
    /// </summary>
    [DataContract(Name = "AssetFilter")]
    public partial class AssetFilter : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Classification
        /// </summary>
        [DataMember(Name = "classification", EmitDefaultValue = false)]
        public ClassificationSpecificEnum? Classification { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetFilter" /> class.
        /// </summary>
        /// <param name="schema">schema.</param>
        /// <param name="classification">classification.</param>
        /// <param name="tags">tags.</param>
        /// <param name="websites">websites.</param>
        /// <param name="persons">persons.</param>
        /// <param name="phrase">phrase.</param>
        /// <param name="created">created.</param>
        /// <param name="updated">updated.</param>
        /// <param name="operations">operations.</param>
        public AssetFilter(EmbeddedModelSchema schema = default(EmbeddedModelSchema), ClassificationSpecificEnum? classification = default(ClassificationSpecificEnum?), List<string> tags = default(List<string>), List<string> websites = default(List<string>), List<string> persons = default(List<string>), AssetFilterPhrase phrase = default(AssetFilterPhrase), AssetFilterTimestamp created = default(AssetFilterTimestamp), AssetFilterTimestamp updated = default(AssetFilterTimestamp), AssetFilters operations = default(AssetFilters))
        {
            this.Schema = schema;
            this.Classification = classification;
            this.Tags = tags;
            this.Websites = websites;
            this.Persons = persons;
            this.Phrase = phrase;
            this.Created = created;
            this.Updated = updated;
            this.Operations = operations;
        }

        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name = "schema", EmitDefaultValue = false)]
        public EmbeddedModelSchema Schema { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Websites
        /// </summary>
        [DataMember(Name = "websites", EmitDefaultValue = false)]
        public List<string> Websites { get; set; }

        /// <summary>
        /// Gets or Sets Persons
        /// </summary>
        [DataMember(Name = "persons", EmitDefaultValue = false)]
        public List<string> Persons { get; set; }

        /// <summary>
        /// Gets or Sets Phrase
        /// </summary>
        [DataMember(Name = "phrase", EmitDefaultValue = false)]
        public AssetFilterPhrase Phrase { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public AssetFilterTimestamp Created { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name = "updated", EmitDefaultValue = false)]
        public AssetFilterTimestamp Updated { get; set; }

        /// <summary>
        /// Gets or Sets Operations
        /// </summary>
        [DataMember(Name = "operations", EmitDefaultValue = false)]
        public AssetFilters Operations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetFilter {\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Websites: ").Append(Websites).Append("\n");
            sb.Append("  Persons: ").Append(Persons).Append("\n");
            sb.Append("  Phrase: ").Append(Phrase).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Operations: ").Append(Operations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

            /// <summary>
            /// To validate all properties of the instance
            /// </summary>
            /// <param name="validationContext">Validation context</param>
            /// <returns>Validation Result</returns>
            IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
            {
            yield break;
        }
    }

}
