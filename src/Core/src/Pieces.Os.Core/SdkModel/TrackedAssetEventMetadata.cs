/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pieces.Os.Core.Client.OpenAPIDateConverter;

namespace Pieces.Os.Core.SdkModel
{
    /// <summary>
    /// TrackedAssetEventMetadata
    /// </summary>
    [DataContract(Name = "TrackedAssetEventMetadata")]
    public partial class TrackedAssetEventMetadata : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedAssetEventMetadata" /> class.
        /// </summary>
        /// <param name="reclassification">reclassification.</param>
        /// <param name="creation">creation.</param>
        /// <param name="rename">rename.</param>
        /// <param name="tag">tag.</param>
        /// <param name="website">website.</param>
        /// <param name="person">person.</param>
        /// <param name="sensitive">sensitive.</param>
        /// <param name="share">share.</param>
        /// <param name="search">search.</param>
        /// <param name="annotation">annotation.</param>
        /// <param name="hint">hint.</param>
        /// <param name="anchor">anchor.</param>
        public TrackedAssetEventMetadata(TrackedAssetEventFormatReclassificationMetadata reclassification = default(TrackedAssetEventFormatReclassificationMetadata), TrackedAssetEventCreationMetadata creation = default(TrackedAssetEventCreationMetadata), TrackedAssetEventRenameMetadata rename = default(TrackedAssetEventRenameMetadata), ReferencedTag tag = default(ReferencedTag), ReferencedWebsite website = default(ReferencedWebsite), ReferencedPerson person = default(ReferencedPerson), ReferencedSensitive sensitive = default(ReferencedSensitive), ReferencedShare share = default(ReferencedShare), TrackedAssetsEventSearchMetadata search = default(TrackedAssetsEventSearchMetadata), ReferencedAnnotation annotation = default(ReferencedAnnotation), ReferencedHint hint = default(ReferencedHint), ReferencedAnchor anchor = default(ReferencedAnchor))
        {
            this.Reclassification = reclassification;
            this.Creation = creation;
            this.Rename = rename;
            this.Tag = tag;
            this.Website = website;
            this.Person = person;
            this.Sensitive = sensitive;
            this.Share = share;
            this.Search = search;
            this.Annotation = annotation;
            this.Hint = hint;
            this.Anchor = anchor;
        }

        /// <summary>
        /// Gets or Sets Reclassification
        /// </summary>
        [DataMember(Name = "reclassification", EmitDefaultValue = false)]
        public TrackedAssetEventFormatReclassificationMetadata Reclassification { get; set; }

        /// <summary>
        /// Gets or Sets Creation
        /// </summary>
        [DataMember(Name = "creation", EmitDefaultValue = false)]
        public TrackedAssetEventCreationMetadata Creation { get; set; }

        /// <summary>
        /// Gets or Sets Rename
        /// </summary>
        [DataMember(Name = "rename", EmitDefaultValue = false)]
        public TrackedAssetEventRenameMetadata Rename { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public ReferencedTag Tag { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name = "website", EmitDefaultValue = false)]
        public ReferencedWebsite Website { get; set; }

        /// <summary>
        /// Gets or Sets Person
        /// </summary>
        [DataMember(Name = "person", EmitDefaultValue = false)]
        public ReferencedPerson Person { get; set; }

        /// <summary>
        /// Gets or Sets Sensitive
        /// </summary>
        [DataMember(Name = "sensitive", EmitDefaultValue = false)]
        public ReferencedSensitive Sensitive { get; set; }

        /// <summary>
        /// Gets or Sets Share
        /// </summary>
        [DataMember(Name = "share", EmitDefaultValue = false)]
        public ReferencedShare Share { get; set; }

        /// <summary>
        /// Gets or Sets Search
        /// </summary>
        [DataMember(Name = "search", EmitDefaultValue = false)]
        public TrackedAssetsEventSearchMetadata Search { get; set; }

        /// <summary>
        /// Gets or Sets Annotation
        /// </summary>
        [DataMember(Name = "annotation", EmitDefaultValue = false)]
        public ReferencedAnnotation Annotation { get; set; }

        /// <summary>
        /// Gets or Sets Hint
        /// </summary>
        [DataMember(Name = "hint", EmitDefaultValue = false)]
        public ReferencedHint Hint { get; set; }

        /// <summary>
        /// Gets or Sets Anchor
        /// </summary>
        [DataMember(Name = "anchor", EmitDefaultValue = false)]
        public ReferencedAnchor Anchor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedAssetEventMetadata {\n");
            sb.Append("  Reclassification: ").Append(Reclassification).Append("\n");
            sb.Append("  Creation: ").Append(Creation).Append("\n");
            sb.Append("  Rename: ").Append(Rename).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Sensitive: ").Append(Sensitive).Append("\n");
            sb.Append("  Share: ").Append(Share).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  Annotation: ").Append(Annotation).Append("\n");
            sb.Append("  Hint: ").Append(Hint).Append("\n");
            sb.Append("  Anchor: ").Append(Anchor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

            /// <summary>
            /// To validate all properties of the instance
            /// </summary>
            /// <param name="validationContext">Validation context</param>
            /// <returns>Validation Result</returns>
            IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
            {
            yield break;
        }
    }

}
