/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pieces.Os.Core.Client.OpenAPIDateConverter;

namespace Pieces.Os.Core.SdkModel
{
    /// <summary>
    /// This will get used in the Websocket and in the get request for Ollama Note:  - updating (nullable) will be used in the case an update is underway  - installing (nullable) will be used in the case an installation is underway  - updateRequired (nullable) will be used in the case an update is required  - installation (nullable) will be provided in the case Ollama is installed.
    /// </summary>
    [DataContract(Name = "OllamaStatus")]
    public partial class OllamaStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OllamaStatus" /> class.
        /// </summary>
        /// <param name="schema">schema.</param>
        /// <param name="updating">updating.</param>
        /// <param name="installing">installing.</param>
        /// <param name="updateRequired">updateRequired.</param>
        /// <param name="installation">installation.</param>
        /// <param name="recommendation">recommendation.</param>
        public OllamaStatus(EmbeddedModelSchema schema = default(EmbeddedModelSchema), OllamaDeployment updating = default(OllamaDeployment), OllamaDeployment installing = default(OllamaDeployment), OllamaDeployment updateRequired = default(OllamaDeployment), OllamaDeployment installation = default(OllamaDeployment), OllamaRecommendation recommendation = default(OllamaRecommendation))
        {
            this.Schema = schema;
            this.Updating = updating;
            this.Installing = installing;
            this.UpdateRequired = updateRequired;
            this.Installation = installation;
            this.Recommendation = recommendation;
        }

        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name = "schema", EmitDefaultValue = false)]
        public EmbeddedModelSchema Schema { get; set; }

        /// <summary>
        /// Gets or Sets Updating
        /// </summary>
        [DataMember(Name = "updating", EmitDefaultValue = false)]
        public OllamaDeployment Updating { get; set; }

        /// <summary>
        /// Gets or Sets Installing
        /// </summary>
        [DataMember(Name = "installing", EmitDefaultValue = false)]
        public OllamaDeployment Installing { get; set; }

        /// <summary>
        /// Gets or Sets UpdateRequired
        /// </summary>
        [DataMember(Name = "updateRequired", EmitDefaultValue = false)]
        public OllamaDeployment UpdateRequired { get; set; }

        /// <summary>
        /// Gets or Sets Installation
        /// </summary>
        [DataMember(Name = "installation", EmitDefaultValue = false)]
        public OllamaDeployment Installation { get; set; }

        /// <summary>
        /// Gets or Sets Recommendation
        /// </summary>
        [DataMember(Name = "recommendation", EmitDefaultValue = false)]
        public OllamaRecommendation Recommendation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OllamaStatus {\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Updating: ").Append(Updating).Append("\n");
            sb.Append("  Installing: ").Append(Installing).Append("\n");
            sb.Append("  UpdateRequired: ").Append(UpdateRequired).Append("\n");
            sb.Append("  Installation: ").Append(Installation).Append("\n");
            sb.Append("  Recommendation: ").Append(Recommendation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

            /// <summary>
            /// To validate all properties of the instance
            /// </summary>
            /// <param name="validationContext">Validation context</param>
            /// <returns>Validation Result</returns>
            IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
            {
            yield break;
        }
    }

}
