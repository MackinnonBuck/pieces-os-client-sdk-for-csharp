/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pieces.Os.Core.Client.OpenAPIDateConverter;

namespace Pieces.Os.Core.SdkModel
{
    /// <summary>
    /// This is used to map the types of the iterable to given booleans of their respective material types
    /// </summary>
    [DataContract(Name = "WorkstreamSuggestionType")]
    public partial class WorkstreamSuggestionType : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkstreamSuggestionType" /> class.
        /// </summary>
        /// <param name="schema">schema.</param>
        /// <param name="summary">summary.</param>
        /// <param name="asset">asset.</param>
        /// <param name="tag">tag.</param>
        /// <param name="website">website.</param>
        /// <param name="anchor">anchor.</param>
        /// <param name="conversation">conversation.</param>
        /// <param name="person">person.</param>
        /// <param name="seed">seed.</param>
        /// <param name="seeds">seeds.</param>
        /// <param name="summaries">summaries.</param>
        /// <param name="assets">assets.</param>
        /// <param name="tags">tags.</param>
        /// <param name="websites">websites.</param>
        /// <param name="anchors">anchors.</param>
        /// <param name="conversations">conversations.</param>
        /// <param name="persons">persons.</param>
        public WorkstreamSuggestionType(bool schema = default(bool), bool summary = default(bool), bool asset = default(bool), bool tag = default(bool), bool website = default(bool), bool anchor = default(bool), bool conversation = default(bool), bool person = default(bool), bool seed = default(bool), bool seeds = default(bool), bool summaries = default(bool), bool assets = default(bool), bool tags = default(bool), bool websites = default(bool), bool anchors = default(bool), bool conversations = default(bool), bool persons = default(bool))
        {
            this.Schema = schema;
            this.Summary = summary;
            this.Asset = asset;
            this.Tag = tag;
            this.Website = website;
            this.Anchor = anchor;
            this.Conversation = conversation;
            this.Person = person;
            this.Seed = seed;
            this.Seeds = seeds;
            this.Summaries = summaries;
            this.Assets = assets;
            this.Tags = tags;
            this.Websites = websites;
            this.Anchors = anchors;
            this.Conversations = conversations;
            this.Persons = persons;
        }

        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name = "schema", EmitDefaultValue = true)]
        public bool Schema { get; set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name = "summary", EmitDefaultValue = true)]
        public bool Summary { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name = "asset", EmitDefaultValue = true)]
        public bool Asset { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name = "tag", EmitDefaultValue = true)]
        public bool Tag { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name = "website", EmitDefaultValue = true)]
        public bool Website { get; set; }

        /// <summary>
        /// Gets or Sets Anchor
        /// </summary>
        [DataMember(Name = "anchor", EmitDefaultValue = true)]
        public bool Anchor { get; set; }

        /// <summary>
        /// Gets or Sets Conversation
        /// </summary>
        [DataMember(Name = "conversation", EmitDefaultValue = true)]
        public bool Conversation { get; set; }

        /// <summary>
        /// Gets or Sets Person
        /// </summary>
        [DataMember(Name = "person", EmitDefaultValue = true)]
        public bool Person { get; set; }

        /// <summary>
        /// Gets or Sets Seed
        /// </summary>
        [DataMember(Name = "seed", EmitDefaultValue = true)]
        public bool Seed { get; set; }

        /// <summary>
        /// Gets or Sets Seeds
        /// </summary>
        [DataMember(Name = "seeds", EmitDefaultValue = true)]
        public bool Seeds { get; set; }

        /// <summary>
        /// Gets or Sets Summaries
        /// </summary>
        [DataMember(Name = "summaries", EmitDefaultValue = true)]
        public bool Summaries { get; set; }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name = "assets", EmitDefaultValue = true)]
        public bool Assets { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public bool Tags { get; set; }

        /// <summary>
        /// Gets or Sets Websites
        /// </summary>
        [DataMember(Name = "websites", EmitDefaultValue = true)]
        public bool Websites { get; set; }

        /// <summary>
        /// Gets or Sets Anchors
        /// </summary>
        [DataMember(Name = "anchors", EmitDefaultValue = true)]
        public bool Anchors { get; set; }

        /// <summary>
        /// Gets or Sets Conversations
        /// </summary>
        [DataMember(Name = "conversations", EmitDefaultValue = true)]
        public bool Conversations { get; set; }

        /// <summary>
        /// Gets or Sets Persons
        /// </summary>
        [DataMember(Name = "persons", EmitDefaultValue = true)]
        public bool Persons { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkstreamSuggestionType {\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Anchor: ").Append(Anchor).Append("\n");
            sb.Append("  Conversation: ").Append(Conversation).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("  Seeds: ").Append(Seeds).Append("\n");
            sb.Append("  Summaries: ").Append(Summaries).Append("\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Websites: ").Append(Websites).Append("\n");
            sb.Append("  Anchors: ").Append(Anchors).Append("\n");
            sb.Append("  Conversations: ").Append(Conversations).Append("\n");
            sb.Append("  Persons: ").Append(Persons).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

            /// <summary>
            /// To validate all properties of the instance
            /// </summary>
            /// <param name="validationContext">Validation context</param>
            /// <returns>Validation Result</returns>
            IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
            {
            yield break;
        }
    }

}
