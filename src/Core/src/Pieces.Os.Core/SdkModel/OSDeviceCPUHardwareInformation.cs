/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pieces.Os.Core.Client.OpenAPIDateConverter;

namespace Pieces.Os.Core.SdkModel
{
    /// <summary>
    /// This will let us know specific hardware information related to the CPU.
    /// </summary>
    [DataContract(Name = "OSDeviceCPUHardwareInformation")]
    public partial class OSDeviceCPUHardwareInformation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OSDeviceCPUHardwareInformation" /> class.
        /// </summary>
        /// <param name="schema">schema.</param>
        /// <param name="name">name.</param>
        /// <param name="l1Cache">l1Cache.</param>
        /// <param name="l2Cache">l2Cache.</param>
        /// <param name="l3Cache">l3Cache.</param>
        /// <param name="sharedMemory">sharedMemory.</param>
        /// <param name="cores">cores.</param>
        /// <param name="clockCycleSpeed">clockCycleSpeed.</param>
        public OSDeviceCPUHardwareInformation(EmbeddedModelSchema schema = default(EmbeddedModelSchema), string name = default(string), decimal l1Cache = default(decimal), decimal l2Cache = default(decimal), decimal l3Cache = default(decimal), bool? sharedMemory = default(bool?), decimal cores = default(decimal), decimal clockCycleSpeed = default(decimal))
        {
            this.Schema = schema;
            this.Name = name;
            this.L1Cache = l1Cache;
            this.L2Cache = l2Cache;
            this.L3Cache = l3Cache;
            this.SharedMemory = sharedMemory;
            this.Cores = cores;
            this.ClockCycleSpeed = clockCycleSpeed;
        }

        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name = "schema", EmitDefaultValue = false)]
        public EmbeddedModelSchema Schema { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets L1Cache
        /// </summary>
        [DataMember(Name = "l1_cache", EmitDefaultValue = false)]
        public decimal L1Cache { get; set; }

        /// <summary>
        /// Gets or Sets L2Cache
        /// </summary>
        [DataMember(Name = "l2_cache", EmitDefaultValue = false)]
        public decimal L2Cache { get; set; }

        /// <summary>
        /// Gets or Sets L3Cache
        /// </summary>
        [DataMember(Name = "l3_cache", EmitDefaultValue = false)]
        public decimal L3Cache { get; set; }

        /// <summary>
        /// Gets or Sets SharedMemory
        /// </summary>
        [DataMember(Name = "shared_memory", EmitDefaultValue = true)]
        public bool? SharedMemory { get; set; }

        /// <summary>
        /// Gets or Sets Cores
        /// </summary>
        [DataMember(Name = "cores", EmitDefaultValue = false)]
        public decimal Cores { get; set; }

        /// <summary>
        /// Gets or Sets ClockCycleSpeed
        /// </summary>
        [DataMember(Name = "clock_cycle_speed", EmitDefaultValue = false)]
        public decimal ClockCycleSpeed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OSDeviceCPUHardwareInformation {\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  L1Cache: ").Append(L1Cache).Append("\n");
            sb.Append("  L2Cache: ").Append(L2Cache).Append("\n");
            sb.Append("  L3Cache: ").Append(L3Cache).Append("\n");
            sb.Append("  SharedMemory: ").Append(SharedMemory).Append("\n");
            sb.Append("  Cores: ").Append(Cores).Append("\n");
            sb.Append("  ClockCycleSpeed: ").Append(ClockCycleSpeed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

            /// <summary>
            /// To validate all properties of the instance
            /// </summary>
            /// <param name="validationContext">Validation context</param>
            /// <returns>Validation Result</returns>
            IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
            {
            yield break;
        }
    }

}
