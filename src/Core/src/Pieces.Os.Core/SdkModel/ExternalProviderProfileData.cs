/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pieces.Os.Core.Client.OpenAPIDateConverter;

namespace Pieces.Os.Core.SdkModel
{
    /// <summary>
    /// All of these will be optional.  Will support ProfileData from all our social providers.
    /// </summary>
    [DataContract(Name = "ExternalProviderProfileData")]
    public partial class ExternalProviderProfileData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalProviderProfileData" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="picture">picture.</param>
        /// <param name="nickname">nickname.</param>
        /// <param name="email">email.</param>
        /// <param name="emailVerified">emailVerified.</param>
        /// <param name="nodeId">nodeId.</param>
        /// <param name="gravatarId">gravatarId.</param>
        /// <param name="url">url.</param>
        /// <param name="htmlUrl">htmlUrl.</param>
        /// <param name="followersUrl">followersUrl.</param>
        /// <param name="followingUrl">followingUrl.</param>
        /// <param name="gistsUrl">gistsUrl.</param>
        /// <param name="starredUrl">starredUrl.</param>
        /// <param name="subscriptionsUrl">subscriptionsUrl.</param>
        /// <param name="organizationsUrl">organizationsUrl.</param>
        /// <param name="reposUrl">reposUrl.</param>
        /// <param name="eventsUrl">eventsUrl.</param>
        /// <param name="receivedEventsUrl">receivedEventsUrl.</param>
        /// <param name="type">type.</param>
        /// <param name="siteAdmin">siteAdmin.</param>
        /// <param name="company">company.</param>
        /// <param name="blog">blog.</param>
        /// <param name="anchor">anchor.</param>
        /// <param name="hireable">hireable.</param>
        /// <param name="bio">bio.</param>
        /// <param name="twitterUsername">twitterUsername.</param>
        /// <param name="publicRepos">publicRepos.</param>
        /// <param name="publicGists">publicGists.</param>
        /// <param name="followers">followers.</param>
        /// <param name="following">following.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="privateGists">privateGists.</param>
        /// <param name="totalPrivateRepos">totalPrivateRepos.</param>
        /// <param name="ownedPrivateRepos">ownedPrivateRepos.</param>
        /// <param name="diskUsage">diskUsage.</param>
        /// <param name="collaborators">collaborators.</param>
        /// <param name="twoFactorAuthentication">twoFactorAuthentication.</param>
        public ExternalProviderProfileData(string name = default(string), string picture = default(string), string nickname = default(string), string email = default(string), bool emailVerified = default(bool), string nodeId = default(string), string gravatarId = default(string), string url = default(string), string htmlUrl = default(string), string followersUrl = default(string), string followingUrl = default(string), string gistsUrl = default(string), string starredUrl = default(string), string subscriptionsUrl = default(string), string organizationsUrl = default(string), string reposUrl = default(string), string eventsUrl = default(string), string receivedEventsUrl = default(string), string type = default(string), bool siteAdmin = default(bool), string company = default(string), string blog = default(string), string anchor = default(string), bool hireable = default(bool), string bio = default(string), string twitterUsername = default(string), int publicRepos = default(int), int publicGists = default(int), int followers = default(int), int following = default(int), string createdAt = default(string), string updatedAt = default(string), int privateGists = default(int), int totalPrivateRepos = default(int), int ownedPrivateRepos = default(int), int diskUsage = default(int), int collaborators = default(int), bool twoFactorAuthentication = default(bool))
        {
            this.Name = name;
            this.Picture = picture;
            this.Nickname = nickname;
            this.Email = email;
            this.EmailVerified = emailVerified;
            this.NodeId = nodeId;
            this.GravatarId = gravatarId;
            this.Url = url;
            this.HtmlUrl = htmlUrl;
            this.FollowersUrl = followersUrl;
            this.FollowingUrl = followingUrl;
            this.GistsUrl = gistsUrl;
            this.StarredUrl = starredUrl;
            this.SubscriptionsUrl = subscriptionsUrl;
            this.OrganizationsUrl = organizationsUrl;
            this.ReposUrl = reposUrl;
            this.EventsUrl = eventsUrl;
            this.ReceivedEventsUrl = receivedEventsUrl;
            this.Type = type;
            this.SiteAdmin = siteAdmin;
            this.Company = company;
            this.Blog = blog;
            this.Anchor = anchor;
            this.Hireable = hireable;
            this.Bio = bio;
            this.TwitterUsername = twitterUsername;
            this.PublicRepos = publicRepos;
            this.PublicGists = publicGists;
            this.Followers = followers;
            this.Following = following;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.PrivateGists = privateGists;
            this.TotalPrivateRepos = totalPrivateRepos;
            this.OwnedPrivateRepos = ownedPrivateRepos;
            this.DiskUsage = diskUsage;
            this.Collaborators = collaborators;
            this.TwoFactorAuthentication = twoFactorAuthentication;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Picture
        /// </summary>
        [DataMember(Name = "picture", EmitDefaultValue = false)]
        public string Picture { get; set; }

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [DataMember(Name = "nickname", EmitDefaultValue = false)]
        public string Nickname { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets EmailVerified
        /// </summary>
        [DataMember(Name = "email_verified", EmitDefaultValue = true)]
        public bool EmailVerified { get; set; }

        /// <summary>
        /// Gets or Sets NodeId
        /// </summary>
        [DataMember(Name = "node_id", EmitDefaultValue = false)]
        public string NodeId { get; set; }

        /// <summary>
        /// Gets or Sets GravatarId
        /// </summary>
        [DataMember(Name = "gravatar_id", EmitDefaultValue = false)]
        public string GravatarId { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets HtmlUrl
        /// </summary>
        [DataMember(Name = "html_url", EmitDefaultValue = false)]
        public string HtmlUrl { get; set; }

        /// <summary>
        /// Gets or Sets FollowersUrl
        /// </summary>
        [DataMember(Name = "followers_url", EmitDefaultValue = false)]
        public string FollowersUrl { get; set; }

        /// <summary>
        /// Gets or Sets FollowingUrl
        /// </summary>
        [DataMember(Name = "following_url", EmitDefaultValue = false)]
        public string FollowingUrl { get; set; }

        /// <summary>
        /// Gets or Sets GistsUrl
        /// </summary>
        [DataMember(Name = "gists_url", EmitDefaultValue = false)]
        public string GistsUrl { get; set; }

        /// <summary>
        /// Gets or Sets StarredUrl
        /// </summary>
        [DataMember(Name = "starred_url", EmitDefaultValue = false)]
        public string StarredUrl { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionsUrl
        /// </summary>
        [DataMember(Name = "subscriptions_url", EmitDefaultValue = false)]
        public string SubscriptionsUrl { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationsUrl
        /// </summary>
        [DataMember(Name = "organizations_url", EmitDefaultValue = false)]
        public string OrganizationsUrl { get; set; }

        /// <summary>
        /// Gets or Sets ReposUrl
        /// </summary>
        [DataMember(Name = "repos_url", EmitDefaultValue = false)]
        public string ReposUrl { get; set; }

        /// <summary>
        /// Gets or Sets EventsUrl
        /// </summary>
        [DataMember(Name = "events_url", EmitDefaultValue = false)]
        public string EventsUrl { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedEventsUrl
        /// </summary>
        [DataMember(Name = "received_events_url", EmitDefaultValue = false)]
        public string ReceivedEventsUrl { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets SiteAdmin
        /// </summary>
        [DataMember(Name = "site_admin", EmitDefaultValue = true)]
        public bool SiteAdmin { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = false)]
        public string Company { get; set; }

        /// <summary>
        /// Gets or Sets Blog
        /// </summary>
        [DataMember(Name = "blog", EmitDefaultValue = false)]
        public string Blog { get; set; }

        /// <summary>
        /// Gets or Sets Anchor
        /// </summary>
        [DataMember(Name = "anchor", EmitDefaultValue = false)]
        public string Anchor { get; set; }

        /// <summary>
        /// Gets or Sets Hireable
        /// </summary>
        [DataMember(Name = "hireable", EmitDefaultValue = true)]
        public bool Hireable { get; set; }

        /// <summary>
        /// Gets or Sets Bio
        /// </summary>
        [DataMember(Name = "bio", EmitDefaultValue = false)]
        public string Bio { get; set; }

        /// <summary>
        /// Gets or Sets TwitterUsername
        /// </summary>
        [DataMember(Name = "twitter_username", EmitDefaultValue = false)]
        public string TwitterUsername { get; set; }

        /// <summary>
        /// Gets or Sets PublicRepos
        /// </summary>
        [DataMember(Name = "public_repos", EmitDefaultValue = false)]
        public int PublicRepos { get; set; }

        /// <summary>
        /// Gets or Sets PublicGists
        /// </summary>
        [DataMember(Name = "public_gists", EmitDefaultValue = false)]
        public int PublicGists { get; set; }

        /// <summary>
        /// Gets or Sets Followers
        /// </summary>
        [DataMember(Name = "followers", EmitDefaultValue = false)]
        public int Followers { get; set; }

        /// <summary>
        /// Gets or Sets Following
        /// </summary>
        [DataMember(Name = "following", EmitDefaultValue = false)]
        public int Following { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets PrivateGists
        /// </summary>
        [DataMember(Name = "private_gists", EmitDefaultValue = false)]
        public int PrivateGists { get; set; }

        /// <summary>
        /// Gets or Sets TotalPrivateRepos
        /// </summary>
        [DataMember(Name = "total_private_repos", EmitDefaultValue = false)]
        public int TotalPrivateRepos { get; set; }

        /// <summary>
        /// Gets or Sets OwnedPrivateRepos
        /// </summary>
        [DataMember(Name = "owned_private_repos", EmitDefaultValue = false)]
        public int OwnedPrivateRepos { get; set; }

        /// <summary>
        /// Gets or Sets DiskUsage
        /// </summary>
        [DataMember(Name = "disk_usage", EmitDefaultValue = false)]
        public int DiskUsage { get; set; }

        /// <summary>
        /// Gets or Sets Collaborators
        /// </summary>
        [DataMember(Name = "collaborators", EmitDefaultValue = false)]
        public int Collaborators { get; set; }

        /// <summary>
        /// Gets or Sets TwoFactorAuthentication
        /// </summary>
        [DataMember(Name = "two_factor_authentication", EmitDefaultValue = true)]
        public bool TwoFactorAuthentication { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalProviderProfileData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Picture: ").Append(Picture).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailVerified: ").Append(EmailVerified).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  GravatarId: ").Append(GravatarId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  FollowersUrl: ").Append(FollowersUrl).Append("\n");
            sb.Append("  FollowingUrl: ").Append(FollowingUrl).Append("\n");
            sb.Append("  GistsUrl: ").Append(GistsUrl).Append("\n");
            sb.Append("  StarredUrl: ").Append(StarredUrl).Append("\n");
            sb.Append("  SubscriptionsUrl: ").Append(SubscriptionsUrl).Append("\n");
            sb.Append("  OrganizationsUrl: ").Append(OrganizationsUrl).Append("\n");
            sb.Append("  ReposUrl: ").Append(ReposUrl).Append("\n");
            sb.Append("  EventsUrl: ").Append(EventsUrl).Append("\n");
            sb.Append("  ReceivedEventsUrl: ").Append(ReceivedEventsUrl).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SiteAdmin: ").Append(SiteAdmin).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Blog: ").Append(Blog).Append("\n");
            sb.Append("  Anchor: ").Append(Anchor).Append("\n");
            sb.Append("  Hireable: ").Append(Hireable).Append("\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("  TwitterUsername: ").Append(TwitterUsername).Append("\n");
            sb.Append("  PublicRepos: ").Append(PublicRepos).Append("\n");
            sb.Append("  PublicGists: ").Append(PublicGists).Append("\n");
            sb.Append("  Followers: ").Append(Followers).Append("\n");
            sb.Append("  Following: ").Append(Following).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  PrivateGists: ").Append(PrivateGists).Append("\n");
            sb.Append("  TotalPrivateRepos: ").Append(TotalPrivateRepos).Append("\n");
            sb.Append("  OwnedPrivateRepos: ").Append(OwnedPrivateRepos).Append("\n");
            sb.Append("  DiskUsage: ").Append(DiskUsage).Append("\n");
            sb.Append("  Collaborators: ").Append(Collaborators).Append("\n");
            sb.Append("  TwoFactorAuthentication: ").Append(TwoFactorAuthentication).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

            /// <summary>
            /// To validate all properties of the instance
            /// </summary>
            /// <param name="validationContext">Validation context</param>
            /// <returns>Validation Result</returns>
            IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
            {
            yield break;
        }
    }

}
