/*
 * Pieces Isomorphic OpenAPI
 *
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Pieces.Os.Core.Client.OpenAPIDateConverter;

namespace Pieces.Os.Core.SdkModel
{
    /// <summary>
    /// A deployment will be used in 4 cases: 1. used to describe an installation in progress 2. used to describe an update in progress 3. used to say what deployment will be needed to upgrade to. 4. used to say what the current version of ollama is present on the machine.
    /// </summary>
    [DataContract(Name = "OllamaDeployment")]
    public partial class OllamaDeployment : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public OllamaDeploymentStatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OllamaDeployment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OllamaDeployment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OllamaDeployment" /> class.
        /// </summary>
        /// <param name="schema">schema.</param>
        /// <param name="id">id.</param>
        /// <param name="status">status.</param>
        /// <param name="updated">updated.</param>
        /// <param name="percentage">Optionally if the update is in progress you will recieve a download percent(from 0-100)..</param>
        /// <param name="varVersion">varVersion (required).</param>
        /// <param name="userManaged">Optionally set, specifically in the case where an update is required, and a user need to take manual action..</param>
        public OllamaDeployment(EmbeddedModelSchema schema = default(EmbeddedModelSchema), string id = default(string), OllamaDeploymentStatusEnum? status = default(OllamaDeploymentStatusEnum?), GroupedTimestamp updated = default(GroupedTimestamp), decimal? percentage = default(decimal?), string varVersion = default(string), bool userManaged = default(bool))
        {
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for OllamaDeployment and cannot be null");
            }
            this.VarVersion = varVersion;
            this.Schema = schema;
            this.Id = id;
            this.Status = status;
            this.Updated = updated;
            this.Percentage = percentage;
            this.UserManaged = userManaged;
        }

        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name = "schema", EmitDefaultValue = false)]
        public EmbeddedModelSchema Schema { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name = "updated", EmitDefaultValue = false)]
        public GroupedTimestamp Updated { get; set; }

        /// <summary>
        /// Optionally if the update is in progress you will recieve a download percent(from 0-100).
        /// </summary>
        /// <value>Optionally if the update is in progress you will recieve a download percent(from 0-100).</value>
        [DataMember(Name = "percentage", EmitDefaultValue = true)]
        public decimal? Percentage { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Optionally set, specifically in the case where an update is required, and a user need to take manual action.
        /// </summary>
        /// <value>Optionally set, specifically in the case where an update is required, and a user need to take manual action.</value>
        [DataMember(Name = "userManaged", EmitDefaultValue = true)]
        public bool UserManaged { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OllamaDeployment {\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  UserManaged: ").Append(UserManaged).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

            /// <summary>
            /// To validate all properties of the instance
            /// </summary>
            /// <param name="validationContext">Validation context</param>
            /// <returns>Validation Result</returns>
            IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
            {
            yield break;
        }
    }

}
